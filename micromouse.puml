@startuml

' ===== CORE =====
class Application {
    + run()
}
Application --> Simulation
Application --> GUIManager

interface SimulationController {
    + start()
    + stop()
    + reset()
    + nextStep()
    + setMouseMode(MouseMode)
    + setMouseBrain(MouseBrainType)
    + setSpeed(int)
    + getSpeed(): int
    + generateMaze()
    + getIsRunning(): bool
    + getMouse(): Micromouse&
    + getMaze(): Maze&
}

class Simulation {
    - Maze maze
    - Micromouse mouse
    + start()
    + stop()
    + reset()
    + nextStep()
    + setMouseMode(MouseMode)
    + setMouseBrain(MouseBrainType)
    + setSpeed(int)
    + getSpeed(): int
    + generateMaze()
    + getIsRunning(): bool
    + getMouse(): Micromouse&
    + getMaze(): Maze&
}
Simulation -|> SimulationController
Simulation --> Maze
Simulation --> Micromouse

' ===== GUI =====
class GUIManager {
    - SimulationController &simulationController
    - std::vector<Drawable*> drawables
    - ControlPanelRenderer controlPanelRenderer
    + mainLoop()
}
GUIManager --> SimulationController

abstract class Drawable {
    + draw(sf::RenderWindow&)
}
Drawable <|-- MazeRenderer
Drawable <|-- MouseRenderer

class MazeRenderer {
    - MazeReader& maze
    + draw(sf::RenderWindow&)
}
class MouseRenderer {
    - Micromouse& mouse
    + draw(sf::RenderWindow&)
}


class ControlPanelRenderer {
    - UIControlsManager& uiManager
    + draw()
    + update()
}
ControlPanelRenderer --> UIControlsManager

class UIControlsManager {
    + addButton()
    + addToggleButton()
    + addTwoStateToggleButtons()
    + addTwoStateDisplayLabels()
    + setTwoStateDisplaySelection()
    + addSliderWithValue()
}

GUIManager --> Drawable
GUIManager --> ControlPanelRenderer

class MouseBrainProvider {
    + getMouseBrainInstance(MouseBrainType): std::unique_ptr<MouseBrain>
}

Simulation --> MouseBrainProvider

' ===== MAZE =====

class MazeReader {
    + isWall(Position, Direction): bool
    + getCellType(Position): CellType
    + getNumOfRows(): int
    + getNumOfColumns(): int
}

class Maze {
    - std::vector<std::vector<Cell>> grid
    + generate()
    + isWall(Position, Direction): bool
    + getCellType(Position): CellType
    + getNumOfRows(): int
    + getNumOfColumns(): int
}

MazeReader <|-- Maze
Maze *-- Cell

class Cell {
    - Position location
    - CellType type
    - std::map<Direction, bool> walls
    + hasWall(Direction): bool
    + getType(): CellType
    + setType(CellType)
    + getLocation(): Position
}

enum Direction {
    NORTH
    EAST
    SOUTH
    WEST
}
enum CellType {
    PATH
    START
    GOAL
}

enum MouseBrainType {
  RANDOM
  ADVANCED
}

enum MoveStatus {
  SUCCESS
  GOAL_REACHED
  FAILURE
}

' ===== MOUSE =====
class Micromouse {
    - Position position
    - MouseSensor sensor
    - std::unique_ptr<MouseBrain> brain
    + makeMove(): MoveStatus
    + reset()
    + setMode(MouseMode)
    + setBrain(std::unique_ptr<MouseBrain>)
}

class MouseSensor {
    - MazeReader &maze
    + getSensorReadings(): SensorReadings
}

class SensorReadings {
    - std::map<Direction, bool> readings
    + isWall(Direction): bool
}

enum MouseMode {
    EXPLORATION
    EXPLORATION_ON_RETURN
    FASTEST_PATH
    RETURN
}

class Position {
    - int x
    - int y
    + getX(): int
    + getY(): int
    + operator<(Position&): bool
    + operator==(Position&): bool
    + operator!=(Position&): bool
    + translate(Direction)
    + translated(Direction): Position
    + getNeighborCellPositions(int gridWidth, int gridHeight): std::vector<Position>
    + getDirectionToNeighbourPosition(Position)
    + toString(): std::string
}

Micromouse --> MouseSensor
Micromouse --> MouseBrain
Micromouse --> Position
MouseSensor --> MazeReader

' ===== MOUSE BRAIN =====
class MouseBrain {
    - std::unique_ptr<ExplorationStrategy> explorationStrategy
    - std::unique_ptr<FastestPathStrategy> pathfindingStrategy
    - MouseMovementProvider* currentStrategy
    - MouseMode activeMode
    - std::map<Position, SensorReadings> mazeMap
    + getNextMove(Position, SensorReadings): Direction
    + isDestinationReached(Position): bool
    + reset()
    + nextMode()
    + getMode(): MouseMode
}

MouseBrain --> MouseMovementProvider
MouseBrain --> ExplorationStrategy
MouseBrain --> FastestPathStrategy

' ===== STRATEGIES =====
abstract class MouseMovementProvider {
    + decideMove(Position, SensorReadings): Direction
    + reset()
    + setDestination(set<Position>)
    + getDestination(): set<Position>
}
abstract class ExplorationStrategy
abstract class FastestPathStrategy {
    - std::map<Position, SensorReadings> mazeMap
    + setMazeMap(map<Position, SensorReadings>)
}

ExplorationStrategy --|> MouseMovementProvider
FastestPathStrategy --|> MouseMovementProvider

class RandomExplorationStrategy {
    + decideMove(Position, SensorReadings): Direction
    + reset()
}
ExplorationStrategy <|-- RandomExplorationStrategy

class FloodingExplorationStrategy {
    + decideMove(Position, SensorReadings): Direction
    + reset()
}
ExplorationStrategy <|-- FloodingExplorationStrategy

class BFSFastestPathStrategy {
    + decideMove(Position, SensorReadings): Direction
    + reset()
}
FastestPathStrategy <|-- RandomFastestPathStrategy

class RandomFastestPathStrategy {
    + decideMove(Position, SensorReadings): Direction
    + reset()
}
FastestPathStrategy <|-- BFSFastestPathStrategy

' ===== UTILS =====
class Randomizer {
    + GetRandom<T>(T min, T max): T
    + GetRandomElement<T>(vector<T>&): T&
    - GetEngine(): std::mt19937&
}

@enduml